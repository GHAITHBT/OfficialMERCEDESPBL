from datetime import datetime
import traceback

@app.route('/health', methods=['GET'])
def health_check():
    """Comprehensive health check endpoint for workstation monitoring"""
    try:
        # Basic system info
        health_data = {
            'status': 'online',
            'timestamp': datetime.now().isoformat(),
            'hostname': socket.gethostname(),
            'ip_address': get_ip_address(),
            'version': '1.0'
        }
        
        # LED status information
        try:
            active_leds = [material for material, status in led_status.items() if status]
            health_data['active_leds'] = active_leds
            health_data['total_leds'] = len(led_status)
        except Exception as e:
            health_data['led_status_error'] = str(e)
            health_data['active_leds'] = []
            health_data['total_leds'] = 0
        
        # I2C device information
        try:
            health_data['i2c_devices'] = list(mcp_devices.keys())
            health_data['i2c_device_count'] = len(mcp_devices)
        except Exception as e:
            health_data['i2c_error'] = str(e)
            health_data['i2c_devices'] = []
            health_data['i2c_device_count'] = 0
        
        # Configuration information
        try:
            if config:
                health_data['materials_configured'] = len(config.get('led_expander_address', {}))
                health_data['has_configuration'] = True
            else:
                health_data['materials_configured'] = 0
                health_data['has_configuration'] = False
        except Exception as e:
            health_data['config_error'] = str(e)
            health_data['materials_configured'] = 0
            health_data['has_configuration'] = False
        
        return jsonify(health_data), 200
        
    except Exception as e:
        error_data = {
            'status': 'error',
            'timestamp': datetime.now().isoformat(),
            'error': str(e),
            'traceback': traceback.format_exc()
        }
        return jsonify(error_data), 500

@app.route('/status', methods=['GET'])
def simple_status():
    """Simple status endpoint for basic connectivity check"""
    try:
        return jsonify({
            'status': 'online',
            'timestamp': datetime.now().isoformat(),
            'hostname': socket.gethostname()
        }), 200
    except Exception as e:
        return jsonify({
            'status': 'error',
            'error': str(e)
        }), 500

@app.route('/led_status', methods=['GET'])
def led_status_endpoint():
    """LED status endpoint"""
    try:
        return jsonify({
            'status': 'ok',
            'active_leds_count': sum(1 for status in led_status.values() if status),
            'total_leds': len(led_status)
        }), 200
    except Exception as e:
        return jsonify({
            'status': 'error',
            'error': str(e)
        }), 500
