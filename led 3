@app.route('/test_single_led', methods=['POST'])
def test_single_led():
    data = request.json
    material = data.get('material')
    
    if not material:
        return jsonify({'error': 'No material provided'}), 400

    # Check if material exists in configuration
    if material in config.get('led_expander_address', {}):
        # Handle MCP expander LEDs
        led_addr = config['led_expander_address'][material]
        led_pin_num = config['led_pin'][material]
        button_addr = config['button_expander_address'][material]
        button_pin_num = config['button_pin'][material]

        led_expander = mcp_devices.get(led_addr)
        button_expander = mcp_devices.get(button_addr)

        if led_expander and button_expander:
            led_pin = led_expander.get_pin(led_pin_num)
            button_pin = button_expander.get_pin(button_pin_num)

            # Turn on the LED
            led_pin.value = True
            print(f"Test LED for {material} activated. Waiting for button press...")

            # Wait for button press (blocking for testing)
            start_time = time.time()
            while True:
                if not button_pin.value:  # Button pressed (reads as low)
                    led_pin.value = False  # Turn LED off
                    print(f"Button pressed for {material}. LED is now OFF.")
                    return jsonify({
                        'status': 'success', 
                        'message': f'Test completed for {material}. LED turned off.'
                    }), 200
                
                # Add timeout to prevent infinite loop (5 minutes timeout)
                if time.time() - start_time > 300:  # 5 minutes
                    led_pin.value = False  # Turn LED off on timeout
                    return jsonify({
                        'status': 'timeout', 
                        'message': f'Test timeout for {material}. No button press detected.'
                    }), 408
                
                time.sleep(0.1)

        else:
            return jsonify({'error': f'Expander not found for {material}'}), 400

    elif material in config.get('led_pins', {}):
        # Handle native GPIO LEDs
        led_pin = config['led_pins'][material]
        button_pin = config['button_pins'][material]

        # Turn on the LED
        GPIO.output(led_pin, GPIO.HIGH)
        print(f"Test LED for {material} activated. Waiting for button press...")

        # Wait for button press
        start_time = time.time()
        while True:
            if GPIO.input(button_pin) == GPIO.LOW:
                GPIO.output(led_pin, GPIO.LOW)
                print(f"Button pressed for {material}. LED is now OFF.")
                return jsonify({
                    'status': 'success', 
                    'message': f'Test completed for {material}. LED turned off.'
                }), 200
            
            # Add timeout to prevent infinite loop (5 minutes timeout)
            if time.time() - start_time > 300:  # 5 minutes
                GPIO.output(led_pin, GPIO.LOW)  # Turn LED off on timeout
                return jsonify({
                    'status': 'timeout', 
                    'message': f'Test timeout for {material}. No button press detected.'
                }), 408
            
            time.sleep(0.1)

    else:
        return jsonify({'error': f'Invalid material: {material}'}), 400
