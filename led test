# Add these endpoints to your Raspberry Pi Flask app (rasp.py)

# Fixed mapping for positions 1-48
POSITION_MAPPING = {
    1: ("0x20", 0), 2: ("0x20", 2), 3: ("0x20", 4), 4: ("0x20", 6),
    5: ("0x20", 8), 6: ("0x20", 10), 7: ("0x20", 12), 8: ("0x20", 14),
    9: ("0x21", 0), 10: ("0x21", 2), 11: ("0x21", 4), 12: ("0x21", 6),
    13: ("0x23", 0), 14: ("0x23", 2), 15: ("0x23", 4), 16: ("0x23", 6),
    17: ("0x23", 8), 18: ("0x23", 10), 19: ("0x23", 12), 20: ("0x23", 14),
    21: ("0x26", 0), 22: ("0x26", 2), 23: ("0x26", 4), 24: ("0x26", 6),
    25: ("0x24", 0), 26: ("0x24", 2), 27: ("0x24", 4), 28: ("0x24", 6),
    29: ("0x24", 8), 30: ("0x24", 10), 31: ("0x24", 12), 32: ("0x24", 14),
    33: ("0x22", 0), 34: ("0x22", 2), 35: ("0x22", 4), 36: ("0x22", 6),
    37: ("0x27", 0), 38: ("0x27", 2), 39: ("0x27", 4), 40: ("0x27", 6),
    41: ("0x27", 8), 42: ("0x27", 10), 43: ("0x27", 12), 44: ("0x27", 14),
    45: ("0x25", 0), 46: ("0x25", 2), 47: ("0x25", 4), 48: ("0x25", 6)
}

@app.route('/test_led_on', methods=['POST'])
def test_led_on():
    """Turn on LED at specific position"""
    try:
        data = request.json
        position = data.get('material_index')
        
        if not position or position not in POSITION_MAPPING:
            return jsonify({'status': 'error', 'error': 'Invalid position'}), 400
        
        address, led_pin = POSITION_MAPPING[position]
        
        if address not in mcp_devices:
            return jsonify({'status': 'error', 'error': f'Device {address} not initialized'}), 400
        
        device = mcp_devices[address]
        led = device.get_pin(led_pin)
        led.value = True
        
        return jsonify({
            'status': 'success',
            'position': position,
            'address': address,
            'pin': led_pin
        }), 200
        
    except Exception as e:
        return jsonify({'status': 'error', 'error': str(e)}), 500

@app.route('/test_led_off', methods=['POST'])
def test_led_off():
    """Turn off LED at specific position"""
    try:
        data = request.json
        position = data.get('material_index')
        
        if not position or position not in POSITION_MAPPING:
            return jsonify({'status': 'error', 'error': 'Invalid position'}), 400
        
        address, led_pin = POSITION_MAPPING[position]
        
        if address not in mcp_devices:
            return jsonify({'status': 'error', 'error': f'Device {address} not initialized'}), 400
        
        device = mcp_devices[address]
        led = device.get_pin(led_pin)
        led.value = False
        
        return jsonify({
            'status': 'success',
            'position': position,
            'address': address,
            'pin': led_pin
        }), 200
        
    except Exception as e:
        return jsonify({'status': 'error', 'error': str(e)}), 500

@app.route('/check_all_buttons', methods=['POST'])
def check_all_buttons():
    """Check the state of all buttons (positions 1-48)"""
    try:
        results = []
        
        for position in range(1, 49):
            if position not in POSITION_MAPPING:
                continue
            
            address, led_pin = POSITION_MAPPING[position]
            button_pin = led_pin + 1  # Button is always LED pin + 1
            
            if address not in mcp_devices:
                results.append({
                    'position': position,
                    'pressed': False,
                    'error': f'Device {address} not initialized'
                })
                continue
            
            try:
                device = mcp_devices[address]
                button = device.get_pin(button_pin)
                
                # Button is pressed when value is False (active low)
                is_pressed = not button.value
                
                results.append({
                    'position': position,
                    'address': address,
                    'pin': button_pin,
                    'pressed': is_pressed
                })
            except Exception as e:
                results.append({
                    'position': position,
                    'pressed': False,
                    'error': str(e)
                })
        
        return jsonify({
            'status': 'success',
            'results': results
        }), 200
        
    except Exception as e:
        return jsonify({'status': 'error', 'error': str(e)}), 500

@app.route('/check_single_button', methods=['POST'])
def check_single_button():
    """Check the state of a single button at specific position"""
    try:
        data = request.json
        position = data.get('position')
        
        if not position or position not in POSITION_MAPPING:
            return jsonify({'status': 'error', 'error': 'Invalid position'}), 400
        
        address, led_pin = POSITION_MAPPING[position]
        button_pin = led_pin + 1
        
        if address not in mcp_devices:
            return jsonify({'status': 'error', 'error': f'Device {address} not initialized'}), 400
        
        device = mcp_devices[address]
        button = device.get_pin(button_pin)
        
        # Button is pressed when value is False (active low)
        is_pressed = not button.value
        
        return jsonify({
            'status': 'success',
            'position': position,
            'address': address,
            'pin': button_pin,
            'pressed': is_pressed
        }), 200
        
    except Exception as e:
        return jsonify({'status': 'error', 'error': str(e)}), 500
